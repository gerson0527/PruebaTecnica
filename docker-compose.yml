version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: medical_system_db
    environment:
      POSTGRES_DB: medical_system  # ← Valor fijo, sin variables
      POSTGRES_USER: medical_user  # ← Valor fijo
      POSTGRES_PASSWORD: medical_password  # ← Valor fijo
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - medical_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medical_user} -d ${POSTGRES_DB:-medical_system}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Node.js
  node-backend:
    build:
      context: ./node-backend
      dockerfile: Dockerfile
    container_name: node_backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=medical_user
      - DB_PASSWORD=medical_password
      - DB_NAME=medical_system
      - JWT_SECRET=supersecret
      - JWT_EXPIRES=1h
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - medical_network
    restart: unless-stopped

  # Frontend Angular
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: medical_system_frontend
    environment:
      - NODE_ENV=development
      - API_URL=http://localhost:8000
    ports:
      - "4200:4200"
    depends_on:
      - node-backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_cache:/app/.angular
    networks:
      - medical_network
    restart: unless-stopped
    command: >
      sh -c "
        npm install &&
        ng serve --host 0.0.0.0 --port 4200 --poll 2000 --disable-host-check
      "

  # Adminer para administrar la BD
  adminer:
    image: adminer:4.8.1
    container_name: medical_system_adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - medical_network
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    container_name: medical_system_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medical_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    profiles:
      - cache

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_cache:
    driver: local
  frontend_cache:
    driver: local

networks:
  medical_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16